package matasano

import "testing"

// func TestDecryptAES(t *testing.T) {
// 	DecryptAES("07-data.txt")
// }

func TestKeyExpansion(t *testing.T) {
	key := "YELLOW SUBMARINE"
	expandedkey := []uint32{1497713740, 1331109971, 1430408513, 1380535877, 1667899980,
		742195743, 2038386526, 724959515, 1679199677, 1210814370, 827638012, 442679783,
		3396213023, 2185598653, 3004257857, 2842924966, 1306934732, 3483609969, 2092105008,
		3586222742, 635743695, 3930523326, 2532703118, 1127518488, 493158613, 4146202219,
		1641545189, 585329917, 1278563398, 3138867757, 3670061000, 4163093301, 3927687687,
		1359777834, 2345418722, 1945107671, 783010952, 2141674658, 4100678464, 2273615767,
		1198539935, 953620541, 3434904445, 1262019818}
	actual := keyExpansion([]byte(key))
	for i := range expandedkey {
		if expandedkey[i] != actual[i] {
			t.Fatalf("Expanded key is incorrect")
		}
	}
}

/*
key expansion of "YELLOW SUBMARINE" seems to be
[89 69 76 76 79 87 32 83 85 66 77 65 82 73 78 69]
[91 126 99 207 20 41 67 156 65 107 14 221 19 34 64 152]
[34 237 106 14 54 196 41 146 119 175 39 79 100 141 103 215]
[105 176 239 138 95 116 198 24 40 219 225 87 76 86 134 128]
[80 1 171 209 15 117 109 201 39 174 140 158 107 248 10 30]
[15 64 204 218 0 53 161 19 39 155 45 141 76 99 39 147]
[102 187 0 135 102 142 161 148 65 21 140 25 13 118 171 138]
[49 131 98 83 87 13 195 199 22 24 79 222 27 110 228 84]
[133 28 11 78 210 17 200 137 196 9 135 87 223 103 99 3]
[45 153 240 21 255 136 56 156 59 129 191 203 228 230 220 200]
[40 23 118 10 215 159 78 150 236 30 241 93 8 248 45 149]

But after trying the new word-based approach, I get this. It matches with the standard library
[89 69 76 76 79 87 32 83 85 66 77 65 82 73 78 69]
[99 106 34 76 44 61 2 31 121 127 79 94 43 54 1 27]
[100 22 141 189 72 43 143 162 49 84 192 252 26 98 193 231]
[202 110 25 31 130 69 150 189 179 17 86 65 169 115 151 166]
[77 230 61 204 207 163 171 113 124 178 253 48 213 193 106 150]
[37 228 173 207 234 71 6 190 150 245 251 142 67 52 145 24]
[29 101 0 213 247 34 6 107 97 215 253 229 34 227 108 253]
[76 53 84 70 187 23 82 45 218 192 175 200 248 35 195 53]
[234 27 194 7 81 12 144 42 139 204 63 226 115 239 252 215]
[46 171 204 136 127 167 92 162 244 107 99 64 135 132 159 151]
[71 112 68 159 56 215 24 61 204 188 123 125 75 56 228 234]

*/
